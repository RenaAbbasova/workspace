1. Historia y Conceptos Clave
JavaScript (JS) y V8
JavaScript (JS): Un lenguaje de programación creado originalmente para ejecutarse en navegadores.
V8 Engine:
Un motor de JavaScript desarrollado por Google.
Convierte JavaScript en código máquina para un rendimiento óptimo.
2008: Chrome lanza su navegador impulsado por V8.
Node.js
2009: Ryan Dahl presentó Node.js, un entorno para ejecutar JavaScript fuera del navegador.
Node.js está construido sobre el motor V8 de Chrome.
Node.js es un runtime de JavaScript, que incluye:
Motor V8 para ejecutar JS.
Biblioteca libuv para operaciones de I/O asíncronas.



2. ¿Qué es un Runtime de JavaScript?
Un runtime es un entorno que permite ejecutar código JavaScript.
En Node.js, el runtime incluye:
Motor V8: Ejecuta JavaScript.
libuv: Biblioteca en C que maneja I/O asíncrono (event loop).
APIs integradas: Funcionalidades como fs, http, path, y crypto.



3. Características Básicas de Node.js
REPL (Read, Eval, Print, Loop):
Herramienta interactiva para ejecutar código.
Salir de REPL: Ctrl + C dos veces o usar .exit.
Ejecutar un archivo JavaScript:
bash
Copy code
node archivo.js
Generar estructura básica del proyecto:
Crear una carpeta public/ para almacenar archivos de proyecto (HTML, CSS, JS, etc.).



4. Diferencias entre Node.js y JavaScript en el Navegador
Node.js	Navegador
global	window
process, module, require	document, history
Ejecuta en el servidor	Ejecuta en el cliente
Acceso al sistema (archivos, red)	DOM y APIs del navegador



5. Comunicación Cliente-Servidor
Protocolo HTTP/HTTPS: Permite que el cliente (navegador) y el servidor (Node.js) se comuniquen.



6. Internals de Node.js
Componentes Internos
APIs integradas:
Ejemplo: fs para manejar archivos, http para crear servidores.
Bindings en C++:
Conecta V8 con libuv.
libuv:
Maneja operaciones de I/O asíncronas con un event loop.
Arquitectura Interna
csharp
Copy code
JavaScript → V8 Engine → libuv → Operaciones asíncronas (fs, red, temporizadores)
Carpetas Clave del Proyecto Node.js
lib/: Contiene los módulos en JavaScript.
src/: Contiene el código fuente en C++.
Ejemplo: node_file.cc (archivo fuente .cc, típico de C++).
libuv
Biblioteca de soporte multi-plataforma.
Maneja I/O asíncrono con un event loop y un thread pool.
Documentación oficial: libuv.org.



7. Sincronía vs. Asincronía en JavaScript
Síncrono:
Las tareas se ejecutan una tras otra, bloqueando la ejecución hasta que terminen.
Asíncrono:
Permite ejecutar tareas en segundo plano sin bloquear el flujo principal.
Mecanismos en JavaScript:
Callbacks:
javascript
Copy code
fs.readFile('archivo.txt', (err, data) => {
    if (err) throw err;
    console.log(data);
});
Promises:
javascript
Copy code
fetch('https://api.example.com/data')
    .then(response => response.json())
    .then(data => console.log(data));
Async/Await:
javascript
Copy code
async function obtenerDatos() {
    const respuesta = await fetch('https://api.example.com/data');
    const datos = await respuesta.json();
    console.log(datos);
}
obtenerDatos();



8. El Event Loop de Node.js
Event Loop:
Responsable de gestionar las tareas asíncronas.
Ejecuta callbacks cuando las operaciones de I/O están completas.
Fases del Event Loop:
Timers:
Maneja setTimeout y setInterval.
I/O Callbacks:
Procesa eventos de I/O (ejemplo: lectura de archivos).
Idle/Prepare:
Interno de Node.js.
Poll:
Recupera nuevos eventos de I/O.
Check:
Ejecuta callbacks de setImmediate.
Close Callbacks:
Maneja eventos de cierre (socket.on('close')).



9. Otras Notas Importantes
Versión LTS (Long-Term Support): Estable y recomendada para producción.
Nodo de Proceso:
process: Contenedor que maneja la memoria y las variables de entorno del programa.



Recursos Recomendados
Node.js API Documentation
Node.js GitHub Repository
libuv Official Documentation


apache and nginx

best to use of node:
server

cpu speack lower language
node not good at video, machine leaning


observe pattern in the node
subject notifies observers when event is coming

listener is callback functions


We use callback functions in programming, particularly in JavaScript, to handle tasks that take time to complete or need to execute after something else happens.
 A callback function is a function passed as an argument to another function, and it's called after the completion of the operation.


modules
request.js, response.js, http.js  

tls
ECMAScript 

import {...} from './request.mjs'
consr [....] (./request)

extencion ECMAScript modules .mjs its good to use with import 
console.log(requare.cache)

file index.js

package.json:
collection 'npmjs.com'-collection of packages
postgres package

create first package 
modele(file) & package(collection of modules)

npm init -y
npm install axios

modele axios

semver.npmjs.com  --- ckecks match versions it is a calculator ex: use ^ or ~
nodemon - package

*************************************************************************
- TAREA OPCIONAL (para subir nota, investigar como usar dominios locales)
### Objetivos de aprendizaje

Al término de este módulo, sabrás:

- Explicar qué es Node.js.
- Entender el funcionamiento de Node.js y su arquitectura de eventos.
- Crear y ejecutar un script de Node.js desde la línea de comandos.
- Revisar técnicas asíncronas: devoluciones de llamada (callbacks), promesas y async/await.

**Con Node.js puedes construir:**

- Servidores web HTTP
- Microservicios o backends de API sin servidor
- Interfaces de línea de comandos (CLI)
- Bibliotecas de código y utilidades
- Scripts de automatización

### Rendimiento con operaciones asíncronas

Node.js aprovecha la arquitectura controlada por eventos de JavaScript para un alto rendimiento. Las técnicas asíncronas incluyen:

- **Async/await (recomendado):** Usa `async` y `await` para obtener resultados de operaciones asíncronas.
- **Callbacks:** Funciones que se pasan como argumentos y se ejecutan al completar una tarea.
- **Promesas:** Objetos que representan la eventual finalización (o fallo) de una operación asíncrona.

## Prueba de conocimientos

1. ¿Qué es Node.js?

   - Un entorno de ejecución de JavaScript.

2. ¿Cómo maneja Node.js las tareas simultáneas?

   - Usa un solo bucle de eventos.

3. ¿Cuándo es Node.js una buena opción?
   - Cuando la aplicación requiere un servidor sin bloqueo controlado por eventos.

   <!-- easter egg two - understand and document the use of .bin npx -g and other similar concepts -->

Las dependencias globales se instalan en un directorio de todo el sistema, no en el nivel de instrucción node_modules. Sin embargo, los paquetes globales pueden desordenar el sistema.

El comando npx lo resuelve instalando temporalmente paquetes. Use npx <name> para capturar un paquete, ejecutarlo y, a continuación, quitarlo.

Después de la instalación, el directorio del proyecto tiene el siguiente aspecto:

```bash
package.json
node_modules/
<name of dependency>/
<files included in the dependency>
src
index.js
```

### Limpieza de dependencias

Si ya no necesita un paquete, quítelo. La eliminación de una dependencia mantiene el proyecto limpio y ahorra espacio.

Esta limpieza es especialmente importante para las aplicaciones de página única (SPA), como Angular, React o Vue como ejemplos conocidos, pero se aplica en general.

Estas aplicaciones agrupan y comprimen el código en un archivo o varios servidos al explorador.

Cuanto mayor sea el archivo, más tiempo tardará en cargarse, lo que puede crear una mala experiencia a los usuarios.

Hay dos maneras de limpiar las dependencias que ya no se necesitan:

- **Desinstalar:** para desinstalar un paquete, ejecute `npm uninstall <name of dependency>`. Este comando quita el paquete del archivo de manifiesto de `package.json` y de la carpeta `node_modules`.

- **Eliminación:** Use `npm prune` para quitar todas las dependencias no incluidas en la lista `node_modules`.

La eliminación es útil cuando desea quitar varias dependencias sin ejecutar la desinstalación de cada una o todas necesitando reinstalar de nuevo las necesarias.


node inspect <YOUR_SCRIPT>.js

| c           | Continúa la ejecución hasta el punto de interrupción siguiente o hasta el final del programa.                                                                                                                               |
| next        | Depurar paso a paso por **procedimientos**. Este comando es similar al comando step, con la diferencia de que si la siguiente línea de código es una llamada a una función, ejecuta la función sin entrar en ella.          |
| s           | Depura paso a paso por **instrucciones**. Este comando es similar al comandonext, con la diferencia de que si la siguiente línea de código es una llamada de función, va a la primera línea del código de esta función.     |
| sb()        | Agrega un punto de interrupción en la línea actual.                                                                                                                                                                         |
| exec <EXPR> | Evalúa una expresión en el contexto de ejecución actual. Este comando es útil para ayudarle a obtener información sobre el estado actual. Por ejemplo, puede obtener el valor de una variable denominada i mediante exec i. |
| Ctrl + D    | Detiene el depurador.  


The issue where the debugger doesn't pause even with the debugger statement is
likely due to how your code is executed and finished before the debugger properly attaches. Here's a step-by-step guide to ensure the debugger works as expected: